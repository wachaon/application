{
  "{177E31B2-AEBB-428E-9CB9-51B08F234154}": {
    "source": "{\n  \"name\": \"application\",\n  \"version\": \"0.0.2\",\n  \"description\": \"Automatic operation of Windows\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle ./src/compile.js ./src/init.js ./src/mouse.cs ./src/keyboard.cs ./src/window.cs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/application.git\"\n  },\n  \"keywords\": [\n    \"window\",\n    \"mouse\",\n    \"keyboard\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/application/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/application#readme\"\n}",
    "mapping": {},
    "path": "{application}/package.json"
  },
  "{B52FA641-78BD-4D08-A04A-1ECF69791EC8}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { readFileSync, existsFileSync } = require('filesystem')\r\nconst { resolve, basename, extname } = require('pathname')\r\nconst { isString, isNumber } = require('typecheck')\r\nconst { execCommand } = require('utility')\r\nconst ps = require('ps')\r\n\r\n// window\r\nconst window_cs = generate('src/window.cs', 5)\r\nconst window_exe = resolve(__dirname, 'window.exe')\r\nconst exists_window_exe = existsFileSync(window_exe)\r\n\r\n// keyboard\r\nconst keyboard_cs = generate('src/keyboard.cs', 2)\r\nconst keyboard_exe = resolve(__dirname, 'keyboard.exe')\r\nconst exists_keyboard_exe = existsFileSync(keyboard_exe)\r\n\r\n// mouse\r\nconst mouse_cs = generate('src/mouse.cs', 3)\r\nconst mouse_exe = resolve(__dirname, 'mouse.exe')\r\nconst exists_mouse_exe = existsFileSync(mouse_exe)\r\n\r\n// mouse method\r\nfunction pos(x = 0, y = 0) {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} pos ${x} ${y}`)\r\n    else ps(mouse_cs, ['pos', x, y])\r\n}\r\n\r\nfunction click() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} click`)\r\n    else ps(mouse_cs, ['click', 0, 0])\r\n}\r\n\r\nfunction leftDown() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} leftDown`)\r\n    else ps(mouse_cs, ['leftDown', 0, 0])\r\n}\r\n\r\nfunction leftUp() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} leftUp`)\r\n    else ps(mouse_cs, ['leftUp', 0, 0])\r\n}\r\n\r\nfunction rightClick() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} rightClick`)\r\n    else ps(mouse_cs, ['rightClick', 0, 0])\r\n}\r\n\r\nfunction rightDown() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} rightDown`)\r\n    else ps(mouse_cs, ['rightDown', 0, 0])\r\n}\r\n\r\nfunction rightUp() {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} rightUp`)\r\n    else ps(mouse_cs, ['rightUp', 0, 0])\r\n}\r\n\r\nfunction scroll(movement = 0) {\r\n    if (exists_mouse_exe) execCommand(`${mouse_exe} scroll ${movement}`)\r\n    else ps(mouse_cs, ['scroll', movement, 0])\r\n}\r\n\r\n// keyboard method\r\nfunction send(keyCode) {\r\n    if (isString(keyCode)) WShell.SendKeys(keyCode)\r\n    if (isNumber(keyCode)) {\r\n        if (exists_keyboard_exe) execCommand(`${keyboard_exe} send ${keyCode}`)\r\n        else ps(keyboard_cs, ['send', keyCode])\r\n    }\r\n}\r\n\r\nfunction press(keyCode) {\r\n    if (exists_keyboard_exe) execCommand(`${keyboard_exe} press ${keyCode}`)\r\n    else ps(keyboard_cs, ['press', keyCode])\r\n}\r\n\r\nfunction release(keyCode) {\r\n    if (exists_keyboard_exe) execCommand(`${keyboard_exe} release ${keyCode}`)\r\n    else ps(keyboard_cs, ['release', keyCode])\r\n}\r\n\r\n// window method\r\nfunction move(left = 0, top = 0, width = 100, height = 100) {\r\n    if (exists_window_exe) execCommand(`${window_exe} move ${left} ${top} ${width} ${height}`)\r\n    else ps(window_cs, ['move', left, top, width, height])\r\n}\r\n\r\nfunction get() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} get`)\r\n    else return ps(window_cs, ['get', 0, 0, 0, 0])\r\n}\r\n\r\nfunction hwnd() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} hwnd`)\r\n    else return ps(window_cs, ['hwnd', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowLeft() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowLeft`)\r\n    else return ps(window_cs, ['windowLeft', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowTop() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowTop`)\r\n    else return ps(window_cs, ['windowTop', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowWidth() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowWidth`)\r\n    else return ps(window_cs, ['windowWidth', 0, 0, 0, 0])\r\n}\r\n\r\nfunction windowHeight() {\r\n    if (exists_window_exe) return execCommand(`${window_exe} windowHeight`)\r\n    else return ps(window_cs, ['windowHeight', 0, 0, 0, 0])\r\n}\r\n\r\nfunction max() {\r\n    if (exists_window_exe) execCommand(`${window_exe} max`)\r\n    else ps(window_cs, ['max', 0, 0, 0, 0])\r\n}\r\n\r\nfunction min() {\r\n    if (exists_window_exe) execCommand(`${window_exe} min`)\r\n    else ps(window_cs, ['min', 0, 0, 0, 0])\r\n}\r\n\r\nfunction normal() {\r\n    if (exists_window_exe) execCommand(`${window_exe} normal`)\r\n    else ps(window_cs, ['normal', 0, 0, 0, 0])\r\n}\r\n\r\nfunction active(hWnd) {\r\n    if (exists_window_exe) execCommand(`${window_exe} hwnd_normal ${hWnd}`)\r\n    else ps(window_cs, ['hwnd_normal', hWnd, 0, 0, 0])\r\n}\r\n\r\nfunction generate(spec, len = 0) {\r\n    const file = resolve(__dirname, spec)\r\n    const program = basename(file, extname(file))\r\n    const args = len ? (new Array(len)).fill(0).map((arg, i) => `$args[${i}]`).join(', ') : ''\r\n    const source = readFileSync(file, 'auto')\r\n    const code = `$Source = @\"\r\n${source}\"@\r\n\r\nAdd-Type -Language CSharp -TypeDefinition $Source\r\n[${program}]::Main(${args})`\r\n    return code\r\n}\r\n\r\nmodule.exports = {\r\n    mouse: {\r\n        pos,\r\n        click,\r\n        leftDown,\r\n        leftUp,\r\n        rightClick,\r\n        rightDown,\r\n        rightUp,\r\n        scroll\r\n    },\r\n    keyboard: {\r\n        send,\r\n        press,\r\n        release\r\n    },\r\n    window: {\r\n        move,\r\n        get,\r\n        hwnd,\r\n        windowLeft,\r\n        windowTop,\r\n        windowWidth,\r\n        windowHeight,\r\n        max,\r\n        min,\r\n        normal,\r\n        active\r\n    },\r\n    VK_LBUTTON: 0x01, // left mouse button\r\n    VK_RBUTTON: 0x02, // right mouse button\r\n    VK_CANCEL: 0x03, // Ctrl+Break processing\r\n    VK_MBUTTON: 0x04, // Middle button on 3-button mouse\r\n    VK_XBUTTON1: 0x05, // mouse X1 button\r\n    VK_XBUTTON2: 0x06, // mouse X2 button\r\n    VK_BACK: 0x08, // Backspace key\r\n    VK_TAB: 0x09, // Tab key\r\n    VK_CLEAR: 0x0C, // clear key\r\n    VK_RETURN: 0x0D, // Enter key\r\n    VK_SHIFT: 0x10, // shift key\r\n    VK_CONTROL: 0x11, // Ctrl key\r\n    VK_MENU: 0x12, // Alt key\r\n    VK_PAUSE: 0x13, // Pause key\r\n    VK_CAPITAL: 0x14, // Caps Lock key\r\n    VK_KANA: 0x15, // IME kana mode\r\n    VK_HANGEUL: 0x15, // IME Hanguel mode (maintained for compatibility; use VK_HANGUL)\r\n    VK_HANGUL: 0x15, // IME hangul mode\r\n    VK_JUNJA: 0x17, // IME Junja mode\r\n    VK_FINAL: 0x18, // IME final mode\r\n    VK_HANJA: 0x19, // IME Hanja mode\r\n    VK_KANJI: 0x19, // IME kanji mode\r\n    VK_ESCAPE: 0x1B, // Esc key\r\n    VK_CONVERT: 0x1C, // IME conversion\r\n    VK_NONCONVERT: 0x1D, // No IME conversion\r\n    VK_ACCEPT: 0x1E, // IME accept\r\n    VK_MODECHANGE: 0x1F, // IME mode change request\r\n    VK_SPACE: 0x20, // space key\r\n    VK_PRIOR: 0x21, // Page Up key\r\n    VK_NEXT: 0x22, // Page Down key\r\n    VK_END: 0x23, // End key\r\n    VK_HOME: 0x24, // home key\r\n    VK_LEFT: 0x25, // cursor key left\r\n    VK_UP: 0x26, // cursor key up\r\n    VK_RIGHT: 0x27, // cursor key right\r\n    VK_DOWN: 0x28, // cursor key down\r\n    VK_SELECT: 0x29, // Select key\r\n    VK_PRINT: 0x2A, // Print key\r\n    VK_EXECUTE: 0x2B, // Execute key\r\n    VK_SNAPSHOT: 0x2C, // Print Screen key\r\n    VK_INSERT: 0x2D, // Insert key\r\n    VK_DELETE: 0x2E, // Delete key\r\n    VK_HELP: 0x2F, // Help key\r\n    VK_0: 0x30, // 0 key\r\n    VK_1: 0x31, // 1 key\r\n    VK_2: 0x32, // 2 keys\r\n    VK_3: 0x33, // 3 key\r\n    VK_4: 0x34, // 4 key\r\n    VK_5: 0x35, // 5 key\r\n    VK_6: 0x36, // 6 key\r\n    VK_7: 0x37, // 7 key\r\n    VK_8: 0x38, // 8 key\r\n    VK_9: 0x39, // 9 key\r\n    VK_A: 0x41, // A key\r\n    VK_B: 0x42, // B key\r\n    VK_C: 0x43, // C key\r\n    VK_D: 0x44, // D key\r\n    VK_E: 0x45, // E key\r\n    VK_F: 0x46, // F key\r\n    VK_G: 0x47, // G key\r\n    VK_H: 0x48, // H key\r\n    VK_I: 0x49, // I key\r\n    VK_J: 0x4A, // J key\r\n    VK_K: 0x4B, // K key\r\n    VK_L: 0x4C, // L key\r\n    VK_M: 0x4D, // M key\r\n    VK_N: 0x4E, // N key\r\n    VK_O: 0x4F, // O key\r\n    VK_P: 0x50, // P key\r\n    VK_Q: 0x51, // Q key\r\n    VK_R: 0x52, // R key\r\n    VK_S: 0x53, // S key\r\n    VK_T: 0x54, // T key\r\n    VK_U: 0x55, // U key\r\n    VK_V: 0x56, // V key\r\n    VK_W: 0x57, // W key\r\n    VK_X: 0x58, // X key\r\n    VK_Y: 0x59, // Y key\r\n    VK_Z: 0x5A, // Z key\r\n    VK_LWIN: 0x5B, // Left Windows key\r\n    VK_RWIN: 0x5C, // Right Windows key\r\n    VK_APPS: 0x5D, // application key\r\n    VK_SLEEP: 0x5F, // sleep key\r\n    VK_NUMPAD0: 0x60, // numeric keypad 0\r\n    VK_NUMPAD1: 0x61, // numeric keypad 1\r\n    VK_NUMPAD2: 0x62, // numeric keypad 2\r\n    VK_NUMPAD3: 0x63, // numeric keypad 3\r\n    VK_NUMPAD4: 0x64, // numeric keypad 4\r\n    VK_NUMPAD5: 0x65, // numeric keypad 5\r\n    VK_NUMPAD6: 0x66, // numeric keypad 6\r\n    VK_NUMPAD7: 0x67, // numeric keypad 7\r\n    VK_NUMPAD8: 0x68, // numeric keypad 8\r\n    VK_NUMPAD9: 0x69, // numeric keypad 9\r\n    VK_MULTIPLY: 0x6A, // * key\r\n    VK_ADD: 0x6B, // + key\r\n    VK_SEPARATOR: 0x6C, // Separator key\r\n    VK_SUBTRACT: 0x6D, // -key\r\n    VK_DECIMAL: 0x6E, // . key\r\n    VK_DIVIDE: 0x6F, // / key\r\n    VK_F1: 0x70, // F1 key\r\n    VK_F2: 0x71, // F2 key\r\n    VK_F3: 0x72, // F3 key\r\n    VK_F4: 0x73, // F4 key\r\n    VK_F5: 0x74, // F5 key\r\n    VK_F6: 0x75, // F6 key\r\n    VK_F7: 0x76, // F7 key\r\n    VK_F8: 0x77, // F8 key\r\n    VK_F9: 0x78, // F9 key\r\n    VK_F10: 0x79, // F10 key\r\n    VK_F11: 0x7A, // F11 key\r\n    VK_F12: 0x7B, // F12 key\r\n    VK_F13: 0x7C, // F13 key\r\n    VK_F14: 0x7D, // F14 key\r\n    VK_F15: 0x7E, // F15 key\r\n    VK_F16: 0x7F, // F16 key\r\n    VK_F17: 0x80, // F17 key\r\n    VK_F18: 0x81, // F18 key\r\n    VK_F19: 0x82, // F19 key\r\n    VK_F20: 0x83, // F20 key\r\n    VK_F21: 0x84, // F21 key\r\n    VK_F22: 0x85, // F22 key\r\n    VK_F23: 0x86, // F23 key\r\n    VK_F24: 0x87, // F24 key\r\n    VK_NUMLOCK: 0x90, // NumLock key\r\n    VK_SCROLL: 0x91, // ScrollLock key\r\n    VK_LSHIFT: 0xA0, // left shift key\r\n    VK_RSHIFT: 0xA1, // right shift key\r\n    VK_LCONTROL: 0xA2, // Left Ctrl key\r\n    VK_RCONTROL: 0xA3, // Right Ctrl key\r\n    VK_LMENU: 0xA4, // Left Alt key\r\n    VK_RMENU: 0xA5, // Right Alt key\r\n    VK_BROWSER_BACK: 0xA6, // browser back key\r\n    VK_BROWSER_FORWARD: 0xA7, // browser forward key\r\n    VK_BROWSER_REFRESH: 0xA8, // browser refresh key\r\n    VK_BROWSER_STOP: 0xA9, // browser stop key\r\n    VK_BROWSER_SEARCH: 0xAA, // browser search key\r\n    VK_BROWSER_FAVORITES: 0xAB, // browser favorite keys\r\n    VK_BROWSER_HOME: 0xAC, // Browser Home key\r\n    VK_VOLUME_MUTE: 0xAD, // volume mute key\r\n    VK_VOLUME_DOWN: 0xAE, // volume down key\r\n    VK_VOLUME_UP: 0xAF, // volume up key\r\n    VK_MEDIA_NEXT_TRACK: 0xB0, // media next track key\r\n    VK_MEDIA_PREV_TRACK: 0xB1, // media pre-track key\r\n    VK_MEDIA_STOP: 0xB2, // media stop key\r\n    VK_MEDIA_PLAY_PAUSE: 0xB3, // media play/pause key\r\n    VK_LAUNCH_MAIL: 0xB4, // Mail launch key\r\n    VK_LAUNCH_MEDIA_SELECT: 0xB5, // media selection key\r\n    VK_LAUNCH_APP1: 0xB6, // launch key 1\r\n    VK_LAUNCH_APP2: 0xB7, // launch key 2\r\n    VK_ICO_HELP: 0xE3, // ?\r\n    VK_ICO_00: 0xE4, // ?\r\n    VK_PROCESSKEY: 0xE5, // IME PROCESS key\r\n    VK_ICO_CLEAR: 0xE6, // ?\r\n    VK_PACKET: 0xE7, // See MSDN for details\r\n    VK_OEM_RESET: 0xE9, // OEM defined key\r\n    VK_OEM_JUMP: 0xEA, // OEM defined key\r\n    VK_OEM_PA1: 0xEB, // OEM defined key\r\n    VK_OEM_PA2: 0xEC, // OEM defined key\r\n    VK_OEM_PA3: 0xED, // OEM defined key\r\n    VK_OEM_WSCTRL: 0xEE, // OEM defined key\r\n    VK_OEM_CUSEL: 0xEF, // OEM defined key\r\n    VK_OEM_ATTN: 0xF0, // OEM defined key\r\n    VK_OEM_FINISH: 0xF1, // OEM defined key\r\n    VK_OEM_COPY: 0xF2, // OEM defined key\r\n    VK_OEM_AUTO: 0xF3, // OEM defined key\r\n    VK_OEM_ENLW: 0xF4, // OEM defined key\r\n    VK_OEM_BACKTAB: 0xF5, // OEM defined key\r\n    VK_ATTN: 0xF6, // Attn key\r\n    VK_CRSEL: 0xF7, // CrSel key\r\n    VK_EXSEL: 0xF8, // Exsel key\r\n    VK_EREOF: 0xF9, // Erase EOF key\r\n    VK_PLAY: 0xFA, // Play key\r\n    VK_ZOOM: 0xFB, // Zoom key\r\n    VK_NONAME: 0xFC, // Reserved\r\n    VK_PA1: 0xFD, // PA1 key\r\n    VK_OEM_CLEAR: 0xFE // clear key\r\n}",
    "mapping": {},
    "path": "{application}/index.js"
  },
  "{BCFBB672-B7C0-443C-B332-D4A5A007E9ED}": {
    "source": "const WShell = require('WScript.Shell')\r\n\r\nconst { resolve, basename, extname, toWin32Sep, dirname } = require('pathname')\r\nconst { existsFileSync } = require('filesystem')\r\nconst { execCommand } = require('utility')\r\nconst isCLI = require('isCLI')\r\nconst { unnamed } = require('argv')\r\n\r\nlet pkg = __dirname\r\nwhile (true) {\r\n    if (existsFileSync(resolve(pkg, 'package.json'))) break\r\n    if (pkg === process.cwd()) break\r\n    pkg = resolve(pkg, '..')\r\n}\r\n\r\nif (isCLI(__filename)) {\r\n    const spec = unnamed.slice(1)\r\n    if (!spec.length) throw new Error('You must specify a file to compile')\r\n    compile(...spec)\r\n} else module.exports = compile\r\n\r\nfunction compile(...specs) {\r\n    const files = specs.map(spec => {\r\n        const _spec = resolve(pkg, spec)\r\n        const filename = basename(spec, extname(spec))\r\n        return {\r\n            output: resolve(pkg, filename + '.exe'),\r\n            input: toWin32Sep(_spec)\r\n        }\r\n    })\r\n\r\n    const versions = [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n\r\n    const compiler = versions\r\n        .map(version => {\r\n            return toWin32Sep(\r\n                resolve(\r\n                    WShell.ExpandEnvironmentStrings(\"%SystemRoot%\"),\r\n                    \"Microsoft.NET/Framework\",\r\n                    version,\r\n                    \"csc.exe\"\r\n                )\r\n            )\r\n        })\r\n        .find(exe => existsFileSync(exe))\r\n\r\n    files.forEach(file => {\r\n        const command = `${compiler} /target:exe /out:${file.output} ${file.input}`\r\n        console.log(execCommand(command))\r\n    })\r\n}\r\n",
    "mapping": {},
    "path": "{application}/src/compile.js"
  },
  "{9634760F-93AD-4BF6-8CEB-3742F1C786EB}": {
    "source": "const compile = require('./compile.js')\r\n\r\ncompile('src/keyboard.cs', 'src/mouse.cs', 'src/window.cs')",
    "mapping": {},
    "path": "{application}/src/init.js"
  },
  "{12E4D433-19F3-4C77-826A-A124D99B04C9}": {
    "source": "using System;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class mouse {\r\n    public static void Main (params string[] args) {\r\n        string method = args[0];\r\n        int posX = args.Length > 1 ? Int32.Parse(args[1]) : 0;\r\n        int posY = args.Length > 2 ? Int32.Parse(args[2]) : 0;\r\n\r\n        int MOUSEEVENTF_LEFTDOWN = 0x0002;\r\n        int MOUSEEVENTF_LEFTUP = 0x0004;\r\n        int MOUSEEVENTF_RIGHTDOWN = 0x0008;\r\n        int MOUSEEVENTF_RIGHTUP = 0x0010;\r\n        int MOUSEEVENTF_MIDDLEDOWN = 0x0020;\r\n        int MOUSEEVENTF_MIDDLEUP = 0x0040;\r\n        int MOUSEEVENTF_WHEEL = 0x0800;\r\n\r\n        if (method == \"pos\") { SetCursorPos(posX, posY); }\r\n\r\n        if (method == \"click\" || method == \"leftDown\") { mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0); }\r\n        if (method == \"click\" || method == \"leftUp\"  ) { mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0); }\r\n\r\n        if (method == \"rightClick\" || method == \"rightDown\") { mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0); }\r\n        if (method == \"rightClick\" || method == \"rightUp\"  ) { mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0); }\r\n\r\n        if (method == \"middleClick\" || method == \"middleDown\") { mouse_event(MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0); }\r\n        if (method == \"middleClick\" || method == \"middleUp\"  ) { mouse_event(MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0); }\r\n\r\n        if (method == \"scroll\") { mouse_event(MOUSEEVENTF_WHEEL,0,0,posX,0); }\r\n    }\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern void SetCursorPos(int X, int Y);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\r\n}\r\n",
    "mapping": {},
    "path": "{application}/src/mouse.cs"
  },
  "{2E5A83CD-AC6F-41E5-A42A-9B39CFB91458}": {
    "source": "using System;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class keyboard {\r\n    public static void Main (params string[] args) {\r\n        string method = args[0];\r\n        int key_code = Int32.Parse(args[1]);\r\n        byte input = (byte)key_code;\r\n\r\n        uint KEYEVENTF_EXTENDEDKEY = 0x1;\r\n        uint KEYEVENTF_KEYUP = 0x2;\r\n\r\n        if (method == \"send\" || method == \"press\") { keybd_event(input, 0, KEYEVENTF_EXTENDEDKEY, 0); }\r\n        if (method == \"send\" || method == \"release\") { keybd_event(input, 0, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0); }\r\n    }\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);\r\n}\r\n",
    "mapping": {},
    "path": "{application}/src/keyboard.cs"
  },
  "{EF996F9E-1843-4E00-9375-26064E621ED1}": {
    "source": "using System;\r\nusing System.Windows;\r\nusing System.Runtime.InteropServices;\r\n\r\npublic class window {\r\n    public static int Main (params string[] args) {\r\n        string method = args[0];\r\n        IntPtr hWnd = GetForegroundWindow();\r\n\r\n        int SW_SHOWNORMAL = 1;\r\n        int SW_SHOWMINIMIZED = 2;\r\n        int SW_MAXIMIZE = 3;\r\n\r\n        if (method == \"move\") {\r\n            int left = Int32.Parse(args[1]);\r\n            int top = Int32.Parse(args[2]);\r\n            int width = Int32.Parse(args[3]);\r\n            int height = Int32.Parse(args[4]);\r\n            int right = width - left;\r\n            int bottom = height - top;\r\n            bool repaint = true;\r\n            MoveWindow(hWnd, left, top, width, height, repaint);\r\n        }\r\n        if (method == \"get\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\r\n                    \"hWnd: {0} left: {1} top: {2} width: {3} height: {4}\",\r\n                    hWnd,\r\n                    rect.left,\r\n                    rect.top,\r\n                    rect.right - rect.left,\r\n                    rect.bottom - rect.top\r\n                );\r\n            } else {\r\n                return 0;\r\n            }\r\n        }\r\n        if (method == \"hwnd\") {\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(hWnd);\r\n            } else {\r\n                return Int32.Parse(hWnd.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowLeft\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"left {0}\", rect.left);\r\n            } else {\r\n                return Int32.Parse(rect.left.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowTop\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"top: {0}\", rect.top);\r\n            } else {\r\n                return Int32.Parse(rect.top.ToString());\r\n            }\r\n        }\r\n        if (method == \"windowWidth\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"whidth: {0}\", rect.right - rect.left);\r\n            } else {\r\n                return Int32.Parse((rect.right - rect.left).ToString());\r\n            }\r\n        }\r\n        if (method == \"windowHeight\") {\r\n            RECT rect;\r\n            bool flag = GetWindowRect(hWnd, out rect);\r\n\r\n            if (args.Length == 1) {\r\n                Console.WriteLine(\"height: {0}\",rect.bottom - rect.top);\r\n            } else {\r\n                return Int32.Parse((rect.bottom - rect.top).ToString());\r\n            }\r\n        }\r\n        if (method == \"active\") {\r\n            IntPtr hwnd = new IntPtr(Int32.Parse(args[1]));\r\n            ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n            SetActiveWindow(hwnd);\r\n        }\r\n\r\n        if (method == \"normal\") {\r\n            ShowWindowAsync(hWnd, SW_SHOWNORMAL);\r\n        }\r\n        if (method == \"min\") {\r\n            ShowWindowAsync(hWnd, SW_SHOWMINIMIZED);\r\n        }\r\n        if (method == \"max\") {\r\n            ShowWindowAsync(hWnd, SW_MAXIMIZE);\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    public static extern IntPtr GetForegroundWindow();\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern int MoveWindow(IntPtr hwnd, int x, int y, int nWidth,int nHeight, bool bRepaint);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern bool GetWindowRect(IntPtr hwnd, out RECT lpRect);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern bool ShowWindowAsync(IntPtr hwnd, int nCmdShow);\r\n\r\n    [DllImport(\"user32.dll\")]\r\n    private static extern IntPtr SetActiveWindow(IntPtr hwnd);\r\n\r\n    [StructLayout(LayoutKind.Sequential)]\r\n    private struct RECT {\r\n        public int left;\r\n        public int top;\r\n        public int right;\r\n        public int bottom;\r\n    }\r\n}\r\n",
    "mapping": {},
    "path": "{application}/src/window.cs"
  }
}