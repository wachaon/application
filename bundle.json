{
  "{EF477E49-AEA4-4C3B-AB4F-BAD7B54CC8C9}": {
    "source": "{\n  \"name\": \"application\",\n  \"version\": \"0.2.0\",\n  \"description\": \"Automatic operation of Windows\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"bundle\": \"wes bundle ./src/application.cs ./usage.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/wachaon/application.git\"\n  },\n  \"keywords\": [\n    \"window\",\n    \"mouse\",\n    \"keyboard\"\n  ],\n  \"author\": \"wachaon\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/wachaon/application/issues\"\n  },\n  \"homepage\": \"https://github.com/wachaon/application#readme\",\n  \"wes\": {\n    \"dependencies\": {\n      \"keyboard\": \"0.0.6\",\n      \"mouse\": \"0.0.6\",\n      \"window\": \"0.0.9\",\n      \"clipboard\": \"0.0.1\",\n      \"csharpscript\": \"0.0.4\"\n    }\n  }\n}",
    "mapping": {},
    "path": "{application}/package.json"
  },
  "{2A1212CC-8CAC-45E5-B2BB-4D9B69C8F679}": {
    "source": "const WShell = require('WScript.Shell')\r\nconst { execCommand, forEach } = require('utility')\r\nconst { isNumber } = require('typecheck')\r\nconst { resolve, toWin32Sep } = require('pathname')\r\nconst { existsFileSync } = require('filesystem')\r\nconst isCLI = require('isCLI')\r\n\r\nconst application = resolve(__dirname, 'application.exe')\r\nconst source = resolve(__dirname, 'src/application.cs')\r\nif (!existsFileSync(application)) compile(source, { out: application })\r\n\r\nmodule.exports = {\r\n    move, getState, normalize, minimize, maximize, activate, send, press, release, pos, click, leftDown, leftUp,\r\n    rightClick, rightDown, rightUp, middleClick, middleDown, middleUp, scroll, setClipboard, getClipboard,\r\n    VK_LBUTTON: 0x01, // left mouse button\r\n    VK_RBUTTON: 0x02, // right mouse button\r\n    VK_CANCEL: 0x03, // Ctrl+Break processing\r\n    VK_MBUTTON: 0x04, // Middle button on 3-button mouse\r\n    VK_XBUTTON1: 0x05, // mouse X1 button\r\n    VK_XBUTTON2: 0x06, // mouse X2 button\r\n    VK_BACK: 0x08, // Backspace key\r\n    VK_TAB: 0x09, // Tab key\r\n    VK_CLEAR: 0x0C, // clear key\r\n    VK_RETURN: 0x0D, // Enter key\r\n    VK_SHIFT: 0x10, // shift key\r\n    VK_CONTROL: 0x11, // Ctrl key\r\n    VK_MENU: 0x12, // Alt key\r\n    VK_PAUSE: 0x13, // Pause key\r\n    VK_CAPITAL: 0x14, // Caps Lock key\r\n    VK_KANA: 0x15, // IME kana mode\r\n    VK_HANGEUL: 0x15, // IME Hanguel mode (maintained for compatibility; use VK_HANGUL)\r\n    VK_HANGUL: 0x15, // IME hangul mode\r\n    VK_JUNJA: 0x17, // IME Junja mode\r\n    VK_FINAL: 0x18, // IME final mode\r\n    VK_HANJA: 0x19, // IME Hanja mode\r\n    VK_KANJI: 0x19, // IME kanji mode\r\n    VK_ESCAPE: 0x1B, // Esc key\r\n    VK_CONVERT: 0x1C, // IME conversion\r\n    VK_NONCONVERT: 0x1D, // No IME conversion\r\n    VK_ACCEPT: 0x1E, // IME accept\r\n    VK_MODECHANGE: 0x1F, // IME mode change request\r\n    VK_SPACE: 0x20, // space key\r\n    VK_PRIOR: 0x21, // Page Up key\r\n    VK_NEXT: 0x22, // Page Down key\r\n    VK_END: 0x23, // End key\r\n    VK_HOME: 0x24, // home key\r\n    VK_LEFT: 0x25, // cursor key left\r\n    VK_UP: 0x26, // cursor key up\r\n    VK_RIGHT: 0x27, // cursor key right\r\n    VK_DOWN: 0x28, // cursor key down\r\n    VK_SELECT: 0x29, // Select key\r\n    VK_PRINT: 0x2A, // Print key\r\n    VK_EXECUTE: 0x2B, // Execute key\r\n    VK_SNAPSHOT: 0x2C, // Print Screen key\r\n    VK_INSERT: 0x2D, // Insert key\r\n    VK_DELETE: 0x2E, // Delete key\r\n    VK_HELP: 0x2F, // Help key\r\n    VK_0: 0x30, // 0 key\r\n    VK_1: 0x31, // 1 key\r\n    VK_2: 0x32, // 2 keys\r\n    VK_3: 0x33, // 3 key\r\n    VK_4: 0x34, // 4 key\r\n    VK_5: 0x35, // 5 key\r\n    VK_6: 0x36, // 6 key\r\n    VK_7: 0x37, // 7 key\r\n    VK_8: 0x38, // 8 key\r\n    VK_9: 0x39, // 9 key\r\n    VK_A: 0x41, // A key\r\n    VK_B: 0x42, // B key\r\n    VK_C: 0x43, // C key\r\n    VK_D: 0x44, // D key\r\n    VK_E: 0x45, // E key\r\n    VK_F: 0x46, // F key\r\n    VK_G: 0x47, // G key\r\n    VK_H: 0x48, // H key\r\n    VK_I: 0x49, // I key\r\n    VK_J: 0x4A, // J key\r\n    VK_K: 0x4B, // K key\r\n    VK_L: 0x4C, // L key\r\n    VK_M: 0x4D, // M key\r\n    VK_N: 0x4E, // N key\r\n    VK_O: 0x4F, // O key\r\n    VK_P: 0x50, // P key\r\n    VK_Q: 0x51, // Q key\r\n    VK_R: 0x52, // R key\r\n    VK_S: 0x53, // S key\r\n    VK_T: 0x54, // T key\r\n    VK_U: 0x55, // U key\r\n    VK_V: 0x56, // V key\r\n    VK_W: 0x57, // W key\r\n    VK_X: 0x58, // X key\r\n    VK_Y: 0x59, // Y key\r\n    VK_Z: 0x5A, // Z key\r\n    VK_LWIN: 0x5B, // Left Windows key\r\n    VK_RWIN: 0x5C, // Right Windows key\r\n    VK_APPS: 0x5D, // application key\r\n    VK_SLEEP: 0x5F, // sleep key\r\n    VK_NUMPAD0: 0x60, // numeric keypad 0\r\n    VK_NUMPAD1: 0x61, // numeric keypad 1\r\n    VK_NUMPAD2: 0x62, // numeric keypad 2\r\n    VK_NUMPAD3: 0x63, // numeric keypad 3\r\n    VK_NUMPAD4: 0x64, // numeric keypad 4\r\n    VK_NUMPAD5: 0x65, // numeric keypad 5\r\n    VK_NUMPAD6: 0x66, // numeric keypad 6\r\n    VK_NUMPAD7: 0x67, // numeric keypad 7\r\n    VK_NUMPAD8: 0x68, // numeric keypad 8\r\n    VK_NUMPAD9: 0x69, // numeric keypad 9\r\n    VK_MULTIPLY: 0x6A, // * key\r\n    VK_ADD: 0x6B, // + key\r\n    VK_SEPARATOR: 0x6C, // Separator key\r\n    VK_SUBTRACT: 0x6D, // -key\r\n    VK_DECIMAL: 0x6E, // . key\r\n    VK_DIVIDE: 0x6F, // / key\r\n    VK_F1: 0x70, // F1 key\r\n    VK_F2: 0x71, // F2 key\r\n    VK_F3: 0x72, // F3 key\r\n    VK_F4: 0x73, // F4 key\r\n    VK_F5: 0x74, // F5 key\r\n    VK_F6: 0x75, // F6 key\r\n    VK_F7: 0x76, // F7 key\r\n    VK_F8: 0x77, // F8 key\r\n    VK_F9: 0x78, // F9 key\r\n    VK_F10: 0x79, // F10 key\r\n    VK_F11: 0x7A, // F11 key\r\n    VK_F12: 0x7B, // F12 key\r\n    VK_F13: 0x7C, // F13 key\r\n    VK_F14: 0x7D, // F14 key\r\n    VK_F15: 0x7E, // F15 key\r\n    VK_F16: 0x7F, // F16 key\r\n    VK_F17: 0x80, // F17 key\r\n    VK_F18: 0x81, // F18 key\r\n    VK_F19: 0x82, // F19 key\r\n    VK_F20: 0x83, // F20 key\r\n    VK_F21: 0x84, // F21 key\r\n    VK_F22: 0x85, // F22 key\r\n    VK_F23: 0x86, // F23 key\r\n    VK_F24: 0x87, // F24 key\r\n    VK_NUMLOCK: 0x90, // NumLock key\r\n    VK_SCROLL: 0x91, // ScrollLock key\r\n    VK_LSHIFT: 0xA0, // left shift key\r\n    VK_RSHIFT: 0xA1, // right shift key\r\n    VK_LCONTROL: 0xA2, // Left Ctrl key\r\n    VK_RCONTROL: 0xA3, // Right Ctrl key\r\n    VK_LMENU: 0xA4, // Left Alt key\r\n    VK_RMENU: 0xA5, // Right Alt key\r\n    VK_BROWSER_BACK: 0xA6, // browser back key\r\n    VK_BROWSER_FORWARD: 0xA7, // browser forward key\r\n    VK_BROWSER_REFRESH: 0xA8, // browser refresh key\r\n    VK_BROWSER_STOP: 0xA9, // browser stop key\r\n    VK_BROWSER_SEARCH: 0xAA, // browser search key\r\n    VK_BROWSER_FAVORITES: 0xAB, // browser favorite keys\r\n    VK_BROWSER_HOME: 0xAC, // Browser Home key\r\n    VK_VOLUME_MUTE: 0xAD, // volume mute key\r\n    VK_VOLUME_DOWN: 0xAE, // volume down key\r\n    VK_VOLUME_UP: 0xAF, // volume up key\r\n    VK_MEDIA_NEXT_TRACK: 0xB0, // media next track key\r\n    VK_MEDIA_PREV_TRACK: 0xB1, // media pre-track key\r\n    VK_MEDIA_STOP: 0xB2, // media stop key\r\n    VK_MEDIA_PLAY_PAUSE: 0xB3, // media play/pause key\r\n    VK_LAUNCH_MAIL: 0xB4, // Mail launch key\r\n    VK_LAUNCH_MEDIA_SELECT: 0xB5, // media selection key\r\n    VK_LAUNCH_APP1: 0xB6, // launch key 1\r\n    VK_LAUNCH_APP2: 0xB7, // launch key 2\r\n    VK_ICO_HELP: 0xE3, // ?\r\n    VK_ICO_00: 0xE4, // ?\r\n    VK_PROCESSKEY: 0xE5, // IME PROCESS key\r\n    VK_ICO_CLEAR: 0xE6, // ?\r\n    VK_PACKET: 0xE7, // See MSDN for details\r\n    VK_OEM_RESET: 0xE9, // OEM defined key\r\n    VK_OEM_JUMP: 0xEA, // OEM defined key\r\n    VK_OEM_PA1: 0xEB, // OEM defined key\r\n    VK_OEM_PA2: 0xEC, // OEM defined key\r\n    VK_OEM_PA3: 0xED, // OEM defined key\r\n    VK_OEM_WSCTRL: 0xEE, // OEM defined key\r\n    VK_OEM_CUSEL: 0xEF, // OEM defined key\r\n    VK_OEM_ATTN: 0xF0, // OEM defined key\r\n    VK_OEM_FINISH: 0xF1, // OEM defined key\r\n    VK_OEM_COPY: 0xF2, // OEM defined key\r\n    VK_OEM_AUTO: 0xF3, // OEM defined key\r\n    VK_OEM_ENLW: 0xF4, // OEM defined key\r\n    VK_OEM_BACKTAB: 0xF5, // OEM defined key\r\n    VK_ATTN: 0xF6, // Attn key\r\n    VK_CRSEL: 0xF7, // CrSel key\r\n    VK_EXSEL: 0xF8, // Exsel key\r\n    VK_EREOF: 0xF9, // Erase EOF key\r\n    VK_PLAY: 0xFA, // Play key\r\n    VK_ZOOM: 0xFB, // Zoom key\r\n    VK_NONAME: 0xFC, // Reserved\r\n    VK_PA1: 0xFD, // PA1 key\r\n    VK_OEM_CLEAR: 0xFE // clear key\r\n}\r\n\r\nfunction move(rect = {}, time = 0) {\r\n    const left = rect.left || 0\r\n    const top = rect.top || 0\r\n    const width = rect.width || 200\r\n    const height = rect.height || 100\r\n\r\n    execCommand(`${application} window.move ${left} ${top} ${width} ${height}`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction getState() {\r\n    const res = execCommand(`${application} window.get`)\r\n    return JSON.parse(res)\r\n}\r\n\r\nfunction normalize(time = 0) {\r\n    execCommand(`${application} window.normal`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction minimize(time = 0) {\r\n    execCommand(`${application} window.min`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction maximize(time = 0) {\r\n    execCommand(`${application} window.max`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction activate(key, time = 0) {\r\n    if (isNumber(key)) execCommand(`${application} window.activate.window.handle ${key}`)\r\n    else execCommand(`${application} window.activate.window.title \"${key}\"`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction send(key, time = 0) {\r\n    if (isNumber(key)) execCommand(`${application} keyboard.send ${key}`)\r\n    else WShell.Sendkeys(key)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction press(key, time = 0) {\r\n    execCommand(`${application} keyboard.press ${key}`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction release(key, time = 0) {\r\n    execCommand(`${application} keyboard.release ${key}`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction pos(position = {}, time = 0) {\r\n    const left = position.left || position.x || 0\r\n    const top = position.top || position.y || 0\r\n    execCommand(`${application} mouse.pos ${left} ${top}`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction click(time = 0) {\r\n    execCommand(`${application} mouse.click`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction leftDown(time = 0) {\r\n    execCommand(`${application} mouse.leftDown`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction leftUp(time = 0) {\r\n    execCommand(`${application} mouse.leftUp`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction rightClick(time = 0) {\r\n    execCommand(`${application} mouse.rightClick`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction rightDown(time = 0) {\r\n    execCommand(`${application} mouse.rightDown`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction rightUp(time = 0) {\r\n    execCommand(`${application} mouse.rightUp`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction middleClick(time = 0) {\r\n    execCommand(`${application} mouse.middleClick`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction middleDown(time = 0) {\r\n    execCommand(`${application} mouse.middleDown`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction middleUp(time = 0) {\r\n    execCommand(`${application} mouse.middleUp`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction scroll(movement = 0) {\r\n    execCommand(`${application} mouse.scroll ${movement}`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction setClipboard(data, type = 'text', time = 0) {\r\n    if (isNumber(type)) [time, type] = [type, 'text']\r\n    if (type.toLowerCase() === 'text') execCommand(`${application} clipboard.setData Text \"${data}\"`)\r\n    WScript.Sleep(time)\r\n}\r\n\r\nfunction getClipboard(time = 0) {\r\n    const res = execCommand(`${application} clipboard.getData Text`)\r\n    WScript.Sleep(time)\r\n    return res\r\n}\r\n\r\n// util\r\nfunction getCompiler() {\r\n    return [\r\n        \"v4.0.30319\",\r\n        \"V3.5\",\r\n        \"V3.0\",\r\n        \"v2.0.50727\",\r\n        \"v1.1.4322\",\r\n        \"v1.0.3705\"\r\n    ]\r\n        .map((ver) => {\r\n            return toWin32Sep(\r\n                resolve(\r\n                    WShell.ExpandEnvironmentStrings(\"%SystemRoot%\"),\r\n                    \"Microsoft.NET/Framework\",\r\n                    ver,\r\n                    \"csc.exe\"\r\n                )\r\n            )\r\n        })\r\n        .find(exe => existsFileSync(exe))\r\n}\r\n\r\nfunction compile(input, options = {}) {\r\n    options.out = toWin32Sep(\r\n        resolve(\r\n            process.cwd(),\r\n            (\r\n                'out' in options\r\n                    ? options.out\r\n                    : basename(input, extname(input)) + \".exe\"\r\n            )\r\n        )\r\n    )\r\n    const opts = Object.assign({\r\n        target: \"exe\"\r\n    }, options)\r\n\r\n    let params = []\r\n    forEach((value, key) => {\r\n        params.push(`/${key}:${value}`)\r\n    })(opts)\r\n\r\n    const command = `${getCompiler()} ${params.join(\" \")} ${toWin32Sep(resolve(process.cwd(), input))}`\r\n    const result = execCommand(command)\r\n\r\n    if (isCLI(__filename)) console.log(result)\r\n    else return result\r\n}",
    "mapping": {},
    "path": "{application}/index.js"
  },
  "{9C73BBD1-F8A6-45BE-B082-72D8F9415BFC}": {
    "source": "\r\nusing System;\r\nusing System.Text;\r\nusing System.Windows;\r\nusing System.Threading;\r\nusing System.Windows.Forms;\r\nusing System.Runtime.InteropServices;\r\n\r\nnamespace wes {\r\n    public class Application {\r\n\r\n        [STAThread]\r\n        public static void Main(params string[] args) {\r\n            string method = args[0];\r\n\r\n            if (method.StartsWith(\"window.\")) {\r\n                IntPtr hWnd = GetForegroundWindow();\r\n                int SW_SHOWNORMAL = 1;\r\n                int SW_SHOWMINIMIZED = 2;\r\n                int SW_MAXIMIZE = 3;\r\n\r\n                if (method == \"window.move\") {\r\n                    int left = Int32.Parse(args[1]);\r\n                    int top = Int32.Parse(args[2]);\r\n                    int width = Int32.Parse(args[3]);\r\n                    int height = Int32.Parse(args[4]);\r\n                    int right = width - left;\r\n                    int bottom = height - top;\r\n                    bool repaint = true;\r\n                    MoveWindow(hWnd, left, top, width, height, repaint);\r\n                }\r\n\r\n                if (method == \"window.get\") {\r\n                    RECT rect;\r\n                    IntPtr hwnd = GetForegroundWindow();\r\n                    bool flag = GetWindowRect(hwnd, out rect);\r\n                    const int nChars = 256;\r\n                    string title = \"\";\r\n                    System.Text.StringBuilder Buff = new System.Text.StringBuilder(nChars);\r\n                    if (GetWindowText(hwnd, Buff, nChars) > 0) {\r\n                        title = Buff.ToString();\r\n                    }\r\n                    Console.WriteLine(\r\n                        \"{{\\\"hwnd\\\": {0}, \\\"left\\\": {1}, \\\"top\\\": {2}, \\\"width\\\": {3}, \\\"height\\\": {4}, \\\"title\\\": \\\"{5}\\\"}}\",\r\n                        hwnd,\r\n                        rect.left,\r\n                        rect.top,\r\n                        rect.right - rect.left,\r\n                        rect.bottom - rect.top,\r\n                        title\r\n                    );\r\n                }\r\n\r\n                if (method == \"window.normal\") {\r\n                    IntPtr hwnd = GetForegroundWindow();\r\n                    ShowWindowAsync(hWnd, SW_SHOWNORMAL);\r\n                }\r\n\r\n                if (method == \"window.min\") {\r\n                    IntPtr hwnd = GetForegroundWindow();\r\n                    ShowWindowAsync(hWnd, SW_SHOWMINIMIZED);\r\n                }\r\n\r\n                if (method == \"window.max\") {\r\n                    IntPtr hwnd = GetForegroundWindow();\r\n                    ShowWindowAsync(hWnd, SW_MAXIMIZE);\r\n                }\r\n\r\n                if (method == \"window.activate.window.title\") {\r\n                    IntPtr hwnd = FindWindow(null, args[1]);\r\n                    if (hwnd != IntPtr.Zero) {\r\n                        SetForegroundWindow(hwnd);\r\n                        ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n                        SetActiveWindow(hwnd);\r\n                    }\r\n                }\r\n\r\n                if (method == \"window.activate.window.handle\") {\r\n                    IntPtr hwnd = new IntPtr(Int32.Parse(args[1]));\r\n                    if (hwnd != IntPtr.Zero) {\r\n                        SetForegroundWindow(hwnd);\r\n                        ShowWindowAsync(hwnd, SW_SHOWNORMAL);\r\n                        SetActiveWindow(hwnd);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (method.StartsWith(\"keyboard.\")) {\r\n                uint KEYEVENTF_EXTENDEDKEY = 0x1;\r\n                uint KEYEVENTF_KEYUP = 0x2;\r\n                int key_code = Int32.Parse(args[1]);\r\n                byte input = (byte)key_code;\r\n\r\n                if (method == \"keyboard.send\") {\r\n                    keybd_event(input, 0, KEYEVENTF_EXTENDEDKEY, 0);\r\n                }\r\n\r\n                if (method == \"keyboard.press\") {\r\n                    keybd_event(input, 0, KEYEVENTF_EXTENDEDKEY, 0);\r\n                    if (args.Length > 2) {\r\n                        int timer = Int32.Parse(args[2]);\r\n                        Thread.Sleep(timer);\r\n                    }\r\n                }\r\n\r\n                if (method == \"keyboard.send\" || method == \"keyboard.release\") {\r\n                    keybd_event(input, 0, KEYEVENTF_EXTENDEDKEY | KEYEVENTF_KEYUP, 0);\r\n                }\r\n            }\r\n\r\n            if (method.StartsWith(\"mouse.\")) {\r\n                int posX = args.Length > 1 ? Int32.Parse(args[1]) : 0;\r\n                int posY = args.Length > 2 ? Int32.Parse(args[2]) : 0;\r\n\r\n                int MOUSEEVENTF_LEFTDOWN = 0x0002;\r\n                int MOUSEEVENTF_LEFTUP = 0x0004;\r\n                int MOUSEEVENTF_RIGHTDOWN = 0x0008;\r\n                int MOUSEEVENTF_RIGHTUP = 0x0010;\r\n                int MOUSEEVENTF_MIDDLEDOWN = 0x0020;\r\n                int MOUSEEVENTF_MIDDLEUP = 0x0040;\r\n                int MOUSEEVENTF_WHEEL = 0x0800;\r\n\r\n                if (method == \"mouse.pos\") { SetCursorPos(posX, posY); }\r\n\r\n                if (method == \"mouse.click\" || method == \"mouse.leftDown\") { mouse_event(MOUSEEVENTF_LEFTDOWN, 0, 0, 0, 0); }\r\n                if (method == \"mouse.click\" || method == \"mouse.leftUp\"  ) { mouse_event(MOUSEEVENTF_LEFTUP, 0, 0, 0, 0); }\r\n\r\n                if (method == \"mouse.rightClick\" || method == \"mouse.rightDown\") { mouse_event(MOUSEEVENTF_RIGHTDOWN, 0, 0, 0, 0); }\r\n                if (method == \"mouse.rightClick\" || method == \"mouse.rightUp\"  ) { mouse_event(MOUSEEVENTF_RIGHTUP, 0, 0, 0, 0); }\r\n\r\n                if (method == \"mouse.middleClick\" || method == \"mouse.middleDown\") { mouse_event(MOUSEEVENTF_MIDDLEDOWN, 0, 0, 0, 0); }\r\n                if (method == \"mouse.middleClick\" || method == \"mouse.middleUp\"  ) { mouse_event(MOUSEEVENTF_MIDDLEUP, 0, 0, 0, 0); }\r\n\r\n                if (method == \"mouse.scroll\") { mouse_event(MOUSEEVENTF_WHEEL,0,0,posX,0); }\r\n            }\r\n\r\n            if (method.StartsWith(\"clipboard.\")) {\r\n                string format = args[1];\r\n                if (method == \"clipboard.setData\") {\r\n                    if (format == \"Text\") {\r\n                        string data = args[2];\r\n                        Clipboard.SetDataObject(data, true);\r\n                    }\r\n                }\r\n                if (method == \"clipboard.getData\") {\r\n                    if (format == \"Text\") {\r\n                        IDataObject data = Clipboard.GetDataObject();\r\n                        if(data.GetDataPresent(DataFormats.Text)) {\r\n                            Console.WriteLine(data.GetData(DataFormats.Text));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        public static extern IntPtr GetForegroundWindow();\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        private static extern int MoveWindow(IntPtr hwnd, int x, int y, int nWidth,int nHeight, bool bRepaint);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        private static extern bool GetWindowRect(IntPtr hwnd, out RECT lpRect);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        private static extern bool ShowWindowAsync(IntPtr hwnd, int nCmdShow);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        private static extern IntPtr SetActiveWindow(IntPtr hwnd);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        static extern bool SetForegroundWindow(IntPtr hWnd);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        static extern IntPtr FindWindow(string lpClassName, string lpWindowName);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        static extern int GetWindowText(IntPtr hWnd, System.Text.StringBuilder lpWindowText, int nMaxCount);\r\n\r\n        [StructLayout(LayoutKind.Sequential)]\r\n        private struct RECT {\r\n            public int left;\r\n            public int top;\r\n            public int right;\r\n            public int bottom;\r\n        }\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        private static extern void keybd_event(byte bVk, byte bScan, uint dwFlags, uint dwExtraInfo);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        public static extern void SetCursorPos(int X, int Y);\r\n\r\n        [DllImport(\"user32.dll\")]\r\n        public static extern void mouse_event(int dwFlags, int dx, int dy, int cButtons, int dwExtraInfo);\r\n\r\n    }\r\n}\r\n",
    "mapping": {},
    "path": "{application}/src/application.cs"
  },
  "{4A80E4B7-3B29-4A1E-BDDD-F14740D16DC9}": {
    "source": "const application = require('/index.js')\r\n\r\nconsole.log(() => application.activate(\"usage.js - application - Visual Studio Code\", 200))\r\napplication.minimize(50)\r\napplication.maximize()\r\nconsole.log(() => application.getState())\r\napplication.pos({ x: 700, y: 500 }, 30)\r\napplication.click()\r\n\r\napplication.setClipboard(\"こんにちは世界\")\r\nconsole.log(() => application.activate(\"chrome\", 200))\r\n//application.send('^v', 500)\r\n\r\napplication.activate(\"wes\", 200)\r\nconsole.log(application.getClipboard())",
    "mapping": {},
    "path": "{application}/usage.js"
  },
  "{BDA23067-B653-4114-B63F-AF277AC55B67}": {
    "source": "MIT License\n\nCopyright (c) 2023 wachaon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "mapping": {},
    "path": "{application}/LICENSE"
  },
  "{97406F83-D9A6-4538-B2EC-4EB3D84DBABA}": {
    "source": "# application\noperation of windows\n",
    "mapping": {},
    "path": "{application}/README.md"
  }
}